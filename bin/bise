#!/usr/bin/env perl

our $VERSION = '2020.05.08.0';

use Modern::Perl;

use File::ReadBackwards;
use File::Temp;
use Apache::Log::Parser;
use DateTime;
use PerlIO::gzip;
use Path::Class::File;
use DateTime::Format::Strptime;
use YAML qw(LoadFile);
use FindBin;
use Getopt::Std;
use JSON;
use File::stat;

use Readonly;
Readonly my $DEFAULT_REGULAR_INTERVAL_DAYS => 1;
Readonly my $DEFAULT_DATE_FORMAT => '%B %d';
Readonly my $DEFAULT_CONFIG_PATH => "$FindBin::Bin/../conf/conf.yaml";
Readonly my $DEFAULT_DAYS_TO_CONSIDER => 14;

my %options;
getopts( 'jmc:', \%options);
$options{c} ||= $DEFAULT_CONFIG_PATH;

my $config_ref = LoadFile( $options{c} );
$config_ref->{ regular_interval_days } ||= $DEFAULT_REGULAR_INTERVAL_DAYS;
$config_ref->{ date_format } ||= $DEFAULT_DATE_FORMAT;
$config_ref->{ days_to_consider } ||= $DEFAULT_DAYS_TO_CONSIDER;

# Bot agent-string pattern list based on
# https://www.sumologic.com/apache/identifying-robots-with-apache-logs/
Readonly my @BOT_REGEXES => (
'[Bb]ot\b', '[Ff]etcher\b', '[Ss]pider\b', '[Cc]rawler\b',
'AskJeeves', 'Digger', 'Lycos', 'Inktomi Slurp', 'Yahoo', 'Nutch',
'BingPreview', 'Mediapartners-Google', 'proximic', 'Ezooms', 'AddThis.com',
'facebookexternalhit', 'MetaURI', 'GoogleProducer', 'RockmeltEmbedder', 'Feedly',
);

my @reports;
foreach ( @{ $config_ref->{ reports } } ) {
    push @reports, { config => $_ };
}

my $sort_sub = $options{'m'}? 'sort_by_mtime' : 'sort_by_filename';
my @log_files = sort $sort_sub @ARGV;

my $now = DateTime->now;
my $two_weeks_ago = $now->clone->subtract( days => $config_ref->{days_to_consider} );

my $parser = Apache::Log::Parser->new (fast => 1);
my $strp = DateTime::Format::Strptime->new( pattern => '%d/%b/%Y:%H:%M:%S %z' );

my $done_reading = 0;
for my $log_filename (@log_files) {
    last if $done_reading;
    process_log_file( $log_filename );
}

for my $report (@reports) {
    my $total = 0;
    my $regular_total = 0;
    my $hits_ref = $report->{hits};
    for my $ip (keys %$hits_ref ) {
        $total += $$hits_ref{$ip}{count};
        if ( int($$hits_ref{$ip}{latest}->subtract_datetime_absolute($$hits_ref{$ip}{earliest})->seconds / 62400 ) >= $config_ref->{regular_interval_days} ) {
        	$regular_total += $$hits_ref{$ip}{count};
        }
    }
    $report->{total} = $total;
    $report->{regular_total} = $regular_total;

}

# If the "j" command-line switch is set, the user wants JSON output.
# Otherwise, they get human-readable tabular output.
if ( $options{j} ) {
    my %output = (
        start_time => "$two_weeks_ago",
        end_time => "$now",
        reports => [],
    );
    for my $report ( @reports ) {
        push @{ $output{reports} }, {
            label => $report->{config}{label},
            uniques => $report->{total},
            regulars => $report->{regular_total},
        };
    }

    say encode_json( \%output );
}
else {
    my ($header, $uniques, $regulars);

    say $two_weeks_ago->strftime($config_ref->{date_format}) . ' - ' . $now->strftime($config_ref->{date_format});
    format STDOUT_TOP =
Source                 Uniques Regulars
---------------------------------------
.
format STDOUT =
@<<<<<<<<<<<<<<<<<<< @>>>>>>>> @>>>>>>>
$header,             $uniques, $regulars
.

    foreach ( @reports ) { report_line($_) }

    sub report_line {
        my ($report) = @_;
        $header = $report->{config}{label};
        $uniques = $report->{total};
        $regulars = $report->{regular_total};
        write;
    }
}

sub sort_by_filename {
    if ( $a =~ /log$/ ) {
        return -1;
    }
    elsif ( $b =~ /log$/ ) {
        return 1;
    }
    my ($a_digit, $b_digit);
    ($a_digit) = $a =~ /log.(\d+)/;
    ($b_digit) = $b =~ /log.(\d+)/;

    return $a_digit <=> $b_digit;
}

sub sort_by_mtime {
    my @stats;
    foreach ($a, $b) {
        my $stat = stat $_ or die "Could not stat $_: $!\n";
        push @stats, $stat;
    }

    return $stats[1]->mtime <=> $stats[0]->mtime;
}


sub process_log_file {
    my ( $log_filename ) = @_;

    my $log_file = Path::Class::File->new( $log_filename );
    if ($log_file =~ /gz$/) {
        my $temp_file = File::Temp->new;
        print $temp_file $log_file->slurp( iomode => '<:gzip' );
        $temp_file->close;
        $log_file = $temp_file;
    }
    my $fh = File::ReadBackwards->new( $log_file );

    while ( my $line = $fh->readline ) {
        my $log = $parser->parse( $line );
        next unless $log->{status} && $log->{status} < 400;
        my $time = $strp->parse_datetime( $log->{datetime} );
        if ( $time < $two_weeks_ago ) {
            $done_reading = 1;
            last;
        }

        my $agent = $log->{agent};
        my $ip    = $log->{rhost};
        my $path  = $log->{path};
        my $referer = $log->{referer};

        # If this is a helpful aggregator, note how many readers it mentions,
        # and then treat its agent string as our storage key,
        # Otherwise, assume one reader, keyed by IP address -- and also check
        # whether this request comes from an apparent non-human, not worth
        # recording.
        my $hit_key;
        my $reader_count;
        if ($agent =~ /^(.*)\b(\d+) (subscriber|reader)/) {
            $reader_count = $2;
            $hit_key = $1;
        }
        else {
            $reader_count = 1;
            $hit_key = $ip;
            my $bot_found = 0;
            foreach (@BOT_REGEXES) {
                if ($agent =~ /$_/) {
                    $bot_found = 1;
                    last;
                }
            }
            next if $bot_found;
        }

        # Run through all our reports' tests.
        for my $report (@reports) {
            my $matched = 0;
            my %report_config = %{ $report->{config} };
            if ($report_config{test_type} eq 'path_regex' ) {
                $matched = 1 if $path =~ /$report_config{test}/x;
            }
            elsif ( $report_config{test_type} eq 'path' ) {
                $matched = 1 if $path eq $report_config{test};
            }
            elsif ( $report_config{test_type} eq 'referer_regex' ) {
                $matched = 1 if $referer =~ /$report_config{test}/x;
            }
            elsif ( $report_config{test_type} eq 'agent_regex' ) {
                $matched = 1 if $agent =~ /$report_config{test}/x;
            }

            if ( $matched ) {
                unless ($report->{hits}{$hit_key} ) {
                	$report->{hits}{$hit_key}{latest} = $time;
                }
                $report->{hits}{$hit_key}{earliest} = $time;
                $report->{hits}{$hit_key}{count} = $reader_count;
            }
        }
    }
}

=head1 NAME

Bise - Summarize a blog's current readership size

=head1 SYNOPSIS

 bise /path/to/apache/logs/blog.access.log*

=head1 DESCRIPTION

Bise looks at a bunch of common log format web-server logs generated by your
blog, and from this generates a little summary of your blog's current human
readership, based on the last couple of weeks' worth of log entries.

For complete documentation with examples and apologies and all that, please
see L<https://github.com/jmacdotorg/bise#bise>.

=head1 OPTIONS

This script accepts the following optional command-line options.

=over

=item B<-c> I</path/to/config.yaml>

Specify the location of a YAML configuration file that Bise should use.

By default, Bise loads the file at C<../conf/conf.yaml>, relative to its own
location in the filesystem.

=item B<-j>

Format report output as JSON, rather than the default human-readable table.

=item B<-m>

Sort log files by modification time, rather than by filename.

By default, Bise assumes that the most recent log file ends with C<.log>, and
that older files end with C<.log.> followed by a number (and then, possibly,
C<.gz>). This matches the default log-naming behavior of Apache.

So, if you're not using Apache, or if your log files aren't named after this
pattern for some other reason, consider using the B<-m> switch.

=back

=head1 AUTHOR

Jason McIntosh <jmac@jmac.org>
